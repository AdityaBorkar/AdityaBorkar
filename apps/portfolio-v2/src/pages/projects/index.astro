---
import { getCollection } from "astro:content";
import BookCta from "@/components/sections/BookCta.astro";
import InlineBold from "@/components/ui/InlineBold.astro";
import Section from "@/components/ui/Section.astro";
import LandingLayout from "@/layouts/LandingLayout/index.astro";
import { SchemaMarkup } from "@/lib/utils";
import ProjectGridItem from "./_ProjectGridItem.astro";
import ProjectListItem from "./_ProjectListItem.astro";
import ToggleViewInput from "./_ToggleViewInput.astro";
import FilterCategoryInput from "./_FilterCategoryInput.astro";

const title = "Projects";
const description = "Projects";
const keywords = ["projects"];
const schema_markup = [
  SchemaMarkup.get("work"),
  SchemaMarkup.get("product"),
  SchemaMarkup.get("webpage/collection"),
];
const open_graph = {};
const seo = { title, description, keywords, schema_markup, open_graph };
const sustainability = {
  co2: 1,
  link: "",
};

const projects = await getCollection("projects");
---

<LandingLayout {...seo} sustainability={sustainability}>
  <Section>
    <h1 class:list={["pt-16 text-3xl font-bold", "md:pt-36 md:text-5xl"]}>
      Selected Projects
    </h1>
    <p
      class:list={[
        "mt-8 text-sm text-text-tertiary text-balance leading-relaxed",
        "md:mt-10 md:max-w-[60%] md:text-base",
      ]}
    >
      <span class="inline-block italic md:mb-4">
        I craft products and signature projects that make a difference.
      </span>
      <br class="hidden md:block" />
      My work empowers businesses to serve <InlineBold
        >better products, enhance efficiency, and boost profitability</InlineBold
      >. It includes <InlineBold>open-source contributions</InlineBold> that support
      fellow engineers and developers in creating better software.
    </p>

    <div
      class:list={[
        "mt-12 flex items-center justify-between flex-row gap-4",
        "md:mt-16",
      ]}
    >
      <FilterCategoryInput />

      <ToggleViewInput />
    </div>

    <div id="context-project-view" class="peer/project-view" data-value="List">
    </div>
    <div
      id="context-project-category"
      class="peer/project-category"
      data-value=""
    >
    </div>

    <div
      id="project-card-wrapper"
      class:list={[
        "mt-4 py-8 grid md:grid-cols-2 grid-cols-1 gap-12",
        "peer-data-[value='List']/project-view:hidden",
      ]}
    >
      {projects.map((project) => <ProjectGridItem {...project} />)}
    </div>

    <div
      id="project-list-wrapper"
      class:list={[
        "my-8 grid grid-cols-1",
        "peer-data-[value='Grid']/project-view:hidden",
      ]}
    >
      <img
        id="hero-image-placeholder"
        class:list={[
          "fixed top-0 left-0 w-[32rem] z-10 rounded-xl select-none pointer-events-none",
        ]}
      />
      {projects.map((project) => <ProjectListItem {...project} />)}
    </div>
  </Section>

  <BookCta />
</LandingLayout>

<script>
  // LIST-GRID & Category using Apple-like animations

  import { motionValue, frame, transform, animate } from "motion";

  const MouseX = motionValue(0);
  const MouseY = motionValue(0);

  MouseX.on("change", () => {
    frame.postRender(ImageFollowAnimation);
  });
  MouseY.on("change", () => {
    frame.postRender(ImageFollowAnimation);
  });

  const image = document.getElementById(
    "hero-image-placeholder",
  ) as HTMLImageElement;
  const wrapper = document.getElementById(
    "project-list-wrapper",
  ) as HTMLDivElement;

  wrapper.addEventListener("mousemove", (e) => {
    const { clientX, clientY } = e;
    MouseX.set(clientX);
    MouseY.set(clientY);
  });
  wrapper.addEventListener("mouseleave", () => {
    animate(image, { opacity: 0, filter: "blur(10px)" });
  });
  wrapper.addEventListener("mouseenter", () => {
    animate(image, { opacity: 1, filter: "blur(0px)" });
  });

  const imageBounds = image.getBoundingClientRect();
  const { width, x } = wrapper.getBoundingClientRect();
  const xTransform = transform(
    [x, x + width],
    [x, x + width - imageBounds.width],
  );

  function ImageFollowAnimation() {
    const midWay = window.innerHeight / 2;
    const { height } = image.getBoundingClientRect();
    const upperOffset = -height - 96;
    const lowerOffset = 96;

    const x = xTransform(MouseX.get());
    const y = MouseY.get();
    const offset = y < midWay ? lowerOffset : upperOffset;

    animate(
      image,
      { top: `${y + offset}px`, left: `${x}px` },
      { duration: 0.5 },
    );
  }
</script>
