---
import { getCollection } from "astro:content";
import BookCta from "@/components/sections/BookCta.astro";
import Icon from "@/components/ui/Icon.astro";
import InlineBold from "@/components/ui/InlineBold.astro";
import Section from "@/components/ui/Section.astro";
import LandingLayout from "@/layouts/LandingLayout/index.astro";
import { SchemaMarkup } from "@/lib/utils";
import ProjectCard from "./_ProjectCard.astro";
import ProjectListItem from "./_ProjectListItem.astro";
import Button from "@/components/ui/Button.astro";
import { Image } from "astro:assets";

const title = "Projects";
const description = "Projects";
const keywords = ["projects"];
const schema_markup = [
  SchemaMarkup.get("work"),
  SchemaMarkup.get("product"),
  SchemaMarkup.get("webpage/collection"),
];
const open_graph = {};
const seo = { title, description, keywords, schema_markup, open_graph };
const sustainability = {
  co2: 1,
  link: "",
};

const AllProjects = await getCollection("projects");
// const AllCategories = [
// 	...new Set(AllProjects.flatMap((project) => project.data.filter_category)),
// ];
---

<LandingLayout {...seo} sustainability={sustainability}>
  <Section>
    <h1 class:list={["pt-16 text-3xl font-bold", "md:pt-36 md:text-5xl"]}>
      Selected Projects
    </h1>
    <p
      class:list={[
        "mt-8 text-sm text-text-tertiary text-balance leading-relaxed",
        "md:mt-10 md:max-w-[60%] md:text-base",
      ]}
    >
      <span class="inline-block italic md:mb-4">
        I craft products and signature projects that make a difference.
      </span>
      <br class="hidden md:block" />
      My work empowers businesses to serve <InlineBold
        >better products, enhance efficiency, and boost profitability</InlineBold
      >. It includes <InlineBold>open-source contributions</InlineBold> that support
      fellow engineers and developers in creating better software.
    </p>

    <div
      class:list={[
        "mt-12 flex items-center justify-between flex-row gap-4",
        "md:mt-16",
      ]}
    >
      <Button
        variant="secondary"
        class="shrink-0 py-2.5 text-text-secondary px-4 rounded-full bg-bg-primary border border-border/10"
      >
        <Icon icon="Filter" class="-mt-0.5 mr-1 inline-block size-4" />
        Filter by Category
      </Button>
      <div
        class="flex flex-row bg-bg-primary border border-border/10 rounded-full"
      >
        <div class="py-2.5 text-text-secondary pl-4">
          <Icon icon="Filter" class="-mt-0.5 mr-1 inline-block size-4" />
          List
        </div>
        <div class="py-2.5 text-text-secondary pr-4">
          Grid <Icon icon="Filter" class="-mt-0.5 mr-1 inline-block size-4" />
        </div>
      </div>
      <!-- <div
        class="flex flex-grow flex-row flex-nowrap overflow-auto whitespace-nowrap gap-2"
      >
        {
          AllCategories.map((tag) => (
            <button
              type="button"
              class:list={[
                "cursor-pointer rounded-full bg-bg-primary hover:bg-bg-secondary px-4 py-1.5 text-sm font-medium text-text-secondary",
                // filterCategory === tag && "bg-foreground text-background",
                "hover:bg-orange-900 hover:text-text-primary",
              ]}
            >
              {tag}
            </button>
          ))
        }
      </div> -->
    </div>

    <!-- <div class="mt-4 py-8 grid md:grid-cols-2 grid-cols-1 gap-12">
      {AllProjects.map((project) => <ProjectCard {...project} />)}
    </div> -->
    <div id="project-list-wrapper" class="my-8 grid grid-cols-1">
      <img
        id="hero-image-placeholder"
        class:list={[
          "fixed top-0 left-0 w-[32rem] z-10 rounded-xl select-none pointer-events-none",
        ]}
      />
      {AllProjects.map((project) => <ProjectListItem {...project} />)}
    </div>
  </Section>

  <BookCta />
</LandingLayout>

<script>
  // LIST-GRID & Category using Apple-like animations

  import { motionValue, frame, transform, animate } from "motion";

  const MouseX = motionValue(0);
  const MouseY = motionValue(0);

  MouseX.on("change", () => {
    frame.postRender(ImageFollowAnimation);
  });
  MouseY.on("change", () => {
    frame.postRender(ImageFollowAnimation);
  });

  const image = document.getElementById(
    "hero-image-placeholder",
  ) as HTMLImageElement;
  const wrapper = document.getElementById(
    "project-list-wrapper",
  ) as HTMLDivElement;

  wrapper.addEventListener("mousemove", (e) => {
    const { clientX, clientY } = e;
    MouseX.set(clientX);
    MouseY.set(clientY);
  });
  wrapper.addEventListener("mouseleave", () => {
    animate(image, { opacity: 0, filter: "blur(10px)" });
  });
  wrapper.addEventListener("mouseenter", () => {
    animate(image, { opacity: 1, filter: "blur(0px)" });
  });

  const imageBounds = image.getBoundingClientRect();
  const { width, x } = wrapper.getBoundingClientRect();
  const xTransform = transform(
    [x, x + width],
    [x, x + width - imageBounds.width],
  );

  function ImageFollowAnimation() {
    const midWay = window.innerHeight / 2;
    const { height } = image.getBoundingClientRect();
    const upperOffset = -height - 96;
    const lowerOffset = 96;

    const x = xTransform(MouseX.get());
    const y = MouseY.get();
    const offset = y < midWay ? lowerOffset : upperOffset;

    animate(
      image,
      { top: `${y + offset}px`, left: `${x}px` },
      { duration: 0.5 },
    );
  }
</script>
