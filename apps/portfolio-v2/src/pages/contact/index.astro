---
import { SOCIALS } from "cms/constants";
import CalMeetButton from "@/components/CalMeetButton.astro";
import Button from "@/components/ui/Button.astro";
import Input from "@/components/ui/Input.astro";
import LandingLayout from "@/layouts/LandingLayout/index.astro";
import { SchemaMarkup } from "@/lib/utils";
import Textarea from "@/components/ui/Textarea.astro";
import SocialLink from "@/pages/contact/_SocialLink.astro";
import LinkedinIcon from "@/assets/icons/LinkedIn.svg";
import MailIcon from "@/assets/icons/Mail.svg";
import TwitterIcon from "@/assets/icons/Twitter.svg";

const title = "Contact";
const description =
  "Reach out to collaborate on innovative projects, insightful podcasts, engaging talks, expert consultations, and exciting collaborations. Let's create something amazing together!";
const keywords = [
  "contact me",
  "collaborate with me",
  "project consultation",
  "business inquiries",
  "partnership opportunities",
  "freelance projects",
  "hire a developer",
];
const open_graph = {};
const schema_markup = [
  SchemaMarkup.get("contact"),
  SchemaMarkup.get("webpage/contact"),
];
const sustainability = {
  co2: 1,
  link: "/",
};
const seo = { title, keywords, description, open_graph, schema_markup };

// Drag and drop attach files, add a nice video, pdf, and image logo.
// Show a list of files attached with uploading animation. This must feel like ios.
---

<LandingLayout {...seo} sustainability={sustainability}>
  <main
    class:list={[
      "bg-background", // ? FIX FOR BACKDROP BLUR
      "mx-auto py-24 md:mb-10 w-full max-w-[40rem] md:px-16 max-md:px-4 max-md:text-sm",
    ]}
  >
    <h2
      animate-fade
      class:list={[
        "text-4xl mb-4 font-bold text-transparent bg-clip-text bg-gradient-to-t from-text-primary to-text-secondary",
        "max-md:text-3xl",
      ]}
    >
      How can I help you?
    </h2>

    <p animate-fade class="font-medium text-balance text-text-tertiary">
      I'm available for projects, consultations, and collaborations. Looking to
      start a new project or want a consult regarding your current project?
      <br /><br />
      I usually reply within 24 hours.
    </p>

    <form animate-fade class="mt-8 grid grid-cols-2 gap-4" data-submitted="">
      <Input
        name="full_name"
        label="Full Name"
        placeholder="Steve Jobs"
        maxlength={24}
        wrapperClass="max-md:col-span-2"
      />
      <Input
        name="email"
        type="email"
        label="Contact Email"
        placeholder="harvey.specter@suits.com"
        wrapperClass="max-md:col-span-2"
        maxlength={320}
      />
      <Input
        name="company_name"
        label="Name of Company"
        placeholder="Perplexity AI"
        wrapperClass="max-md:col-span-2"
        maxlength={100}
      />
      <Input
        name="company_age"
        label="Age of Company"
        placeholder="Select"
        wrapperClass="max-md:col-span-2"
      />
      <div class="group relative col-span-2">
        <Textarea
          name="details"
          label="Tell me about your project:"
          placeholder="Feel free to write here..."
          class="h-64 rounded-xl peer"
          wrapper={Fragment}
          maxlength={1000}
        />
        <!-- Unlock Lenis Scroll -->
        <!-- SVG Gradient Blur for Scroll -->
        <!-- Max. 10k Chars -->
        <!-- TODO: Handle responsiveness -->
        <!-- <div
          class:list={[
            "hidden absolute top-6 -right-[calc(160%+0.5rem)] bg-bg-primary w-[60%] rounded-md border border-border/20 text-text-secondary px-3 py-2 text-sm",
            "md:peer-focus-visible:block",
            "animate-fade starting:opacity-0 ease-in-out duration-300",
          ]}
        >
          Share your vision and ideas with as much detail as possible. Include
          relevant links to references, prototypes, or documents. This will help
          me to understand your project better.
        </div> -->
      </div>
      <!-- Max. 25MB Total File Sizes and 10MB per file -->
      <!--
      <Input
        name="attachments"
        type="tel"
        label="Attach Files"
        placeholder="+91 9876543210"
        wrapperClass="max-md:col-span-2"
      />
      -->
      <!-- Inputs remove error as soon as valid input is detected, if dirty, show errors onFocusOut -->
      <!-- Add Turnstile Captcha or Google Recaptcha -->
      <!-- TODO: Response collected successfully. Expect a reply within <span class="font-semibold underline underline-offset-4 decoration-dashed">three hours</span>. -->

      <div class="mt-8 col-span-2">
        <Button
          type="submit"
          variant="primary"
          size="md"
          class:list={["mx-auto"]}>Submit Inquiry</Button
        >
      </div>
    </form>

    <div class="hidden">
      <p>
        Your message has been sent. Expect a reply within <span
          id="eta-text"
          class="font-semibold underline underline-offset-4 decoration-dashed"
        >
          twenty-four
        </span> hours.
      </p>
    </div>

    <div animate-fade class="mt-16 text-text-tertiary">
      <div class="mb-2">
        {"Prefer a more direct approach?  "}
        <CalMeetButton
          class="mx-0.5 font-medium hover:text-text-primary px-2 py-1"
          text="Schedule a call"
        />
        {"or"}
      </div>
      <SocialLink
        icon={MailIcon}
        href={`mailto:${SOCIALS.email}`}
        label={SOCIALS.email}
        iconClass="fill-none text-current"
      />
      <SocialLink icon={TwitterIcon} href={SOCIALS.x} label="Twitter" />
      <SocialLink
        icon={LinkedinIcon}
        href={SOCIALS.linkedin}
        label="LinkedIn"
      />
    </div>
  </main>
</LandingLayout>

<div class="container__caret" id="caret"></div>
<style is:global>
  textarea,
  input {
    margin-top: -1rem;
    /* caret-color: transparent; */
    &:focus + .caret {
      opacity: 1;
    }
  }
  .caret {
    position: absolute;
    width: 1px;
    background: var(--color-emerald-500);
    opacity: 1;
    z-index: 50;
    left: 0;
    top: 0;
    height: var(--text-base);
    transition: opacity 200ms;
    animation: blink 1s infinite;
    border-radius: 0.25rem;
  }
  .caret.typing {
    animation: none;
  }
  @keyframes blink {
    0% {
      margin-top: 0;
    }
    50% {
      margin-top: calc(var(--text-base) / 2);
      height: 0;
    }
    100% {
      margin-top: 0;
    }
  }
</style>

<script>
  import { actions } from "astro:actions";

  document.addEventListener("DOMContentLoaded", () => {
    const submitButtons = document.querySelectorAll<HTMLButtonElement>(
      "button[type='submit']",
    );
    submitButtons.forEach((button) => {
      button.addEventListener("click", async (e) => {
        e.preventDefault();
        button.disabled = true;
        button.textContent = "Sending..."; // TODO: Add a loading spinner

        const form = button.closest("form") as HTMLFormElement;
        if (!form) return;

        const formData = new FormData(form);
        const response = await actions.contactForm(formData);
        console.log(response);

        button.disabled = false;
        button.textContent = "Submit Inquiry";

        const fields = form.querySelectorAll<
          HTMLInputElement | HTMLTextAreaElement
        >("input, textarea");
        fields.forEach((field) => {
          const name = field.getAttribute("name");
          if (!name) return;

          // Check if there are any validation errors for this field
          let error = "";
          if (response.error) {
            // Safely check for errors without TypeScript complaints
            try {
              // @ts-ignore - We know this may not be type-safe, but it's the expected structure
              const fieldError = response.error[name];
              error = fieldError ? "Required" : "";
            } catch (e) {
              console.error(`Error accessing field ${name}:`, e);
            }
          }

          const error_div = form.querySelector(`[for="${name}"] + p`);
          if (!error_div) return;
          error_div.textContent = error || "";
          field.setCustomValidity(error || "");
        });

        form.setAttribute("data-submitted", "true");
        const etaText = document.getElementById("eta-text");
        if (etaText && response.data?.eta)
          etaText.textContent = response.data.eta;
      });
    });
  });
</script>

<script>
  import { animate } from "motion";

  function removeChar(span: HTMLSpanElement) {
    span.setAttribute("removed", "true");
    animate(
      span,
      {
        opacity: [1, 1, 0],
        filter: ["blur(0px)", "blur(4px)", "blur(4px)"],
        width: [span.offsetWidth, span.offsetWidth, 0],
      },
      {
        duration: 0.3,
        onComplete() {
          span.parentElement?.removeChild(span);
        },
      },
    );
  }

  document.addEventListener("DOMContentLoaded", () => {
    const inputs = document.querySelectorAll<
      HTMLInputElement | HTMLTextAreaElement
    >("textarea, input");

    inputs.forEach(addAnimatedCaret);
  });

  function addAnimatedCaret(input: HTMLInputElement | HTMLTextAreaElement) {
    let typingTimer: number | null = null;

    const ctx = document.createElement("canvas").getContext("2d");
    if (!ctx) return;

    const caret = document.createElement("div");
    caret.classList.add("caret");
    input.parentNode?.insertBefore(caret, input.nextSibling);
    // input.style.color = "transparent";
    // @ts-expect-error
    input.addEventListener("input", processInput);
    // input.addEventListener("click", updateCaretPosition);
    input.addEventListener("keydown", listenKeys);
    input.addEventListener("keydown", startTyping);

    const shadow = document.createElement("div");
    shadow.style.inset = "0";
    shadow.style.overflow = "hidden";
    shadow.style.position = "absolute";
    shadow.style.pointerEvents = "none";
    shadow.style.font = getComputedStyle(input).font;
    shadow.style.width = getComputedStyle(input).width;
    shadow.style.height = getComputedStyle(input).height;
    shadow.style.padding = getComputedStyle(input).padding;
    input.parentNode?.appendChild(shadow);

    let index = 0;
    const setIndex = (i: number) => {
      if (i < 0 || i > input.value.length) return;
      index = i;
      updateCaretPos();
    };

    function getSpan(index: number) {
      const selector = `span:not([removed]):nth-child(${index + 1})`;
      return shadow.querySelector(selector) as HTMLSpanElement | null;
    }

    // ----
    // function moveCursorToPreviousWord() {
    //   const input = document.activeElement;
    //   if (!input || typeof input.value !== "string") return;

    //   let pos = input.selectionStart;
    //   setIndex(pos);
    //   // const value = input.value;
    //   // input.setSelectionRange(pos, pos);

    //   // Skip initial spaces/punctuation
    //   while (pos > 0 && isWhitespaceOrPunctuation(value.charCodeAt(pos - 1))) pos--;

    //   // Skip word characters
    //   while (pos > 0 && isWordChar(value.charCodeAt(pos - 1))) pos--;

    // }

    // function isWordChar(code: number) {
    //   return (
    //     (code >= 48 && code <= 57) ||
    //     (code >= 65 && code <= 90) ||
    //     (code >= 97 && code <= 122)
    //   );
    // }

    // function isWhitespaceOrPunctuation(code: number) {
    //   return (
    //     code <= 32 ||
    //     (code >= 33 && code <= 47) ||
    //     (code >= 58 && code <= 64) ||
    //     (code >= 91 && code <= 96) ||
    //     (code >= 123 && code <= 126)
    //   );
    // }
    // ----
    function getWordIndex(reverse: boolean) {
      // const text = input.value;
      // const end = reverse ? 0 : text.length;
      // const increment = reverse ? -1 : 1;

      // let flag = false;
      // let i = index + reverse ? -1 : 1;
      // do {
      //   console.log({ i, char: text.charAt(i) });
      //   const charCode = text.charCodeAt(i);
      //   i += increment;
      //   if (
      //     (charCode >= 65 && charCode <= 90) ||
      //     (charCode >= 97 && charCode <= 122) ||
      //     (charCode >= 48 && charCode <= 57)
      //   ) {
      //     if (flag) return i;
      //     continue;
      //   }
      //   flag = true;
      // } while (reverse ? i >= end : i <= end);

      let pos = input.selectionStart || 0;
      console.log({ pos });
      return pos;
      // setIndex(pos);
      // return end;
    }

    function processInput(e: InputEvent) {
      const { data, inputType } = e;
      // INSERT COMMANDS:
      if (inputType === "insertText" && data) {
        insertChar(data);
      } else if (inputType === "insertFromPaste" && data) {
        for (const char of data) {
          insertChar(char);
        }
      }
      // "insertParagraph"	insert a paragraph break	No	Yes	Any
      // "insertOrderedList"	insert a numbered list	No	Yes	Any
      // "insertUnorderedList"	insert a bulleted list	No	Yes	Any
      // "insertHorizontalRule
      // insertLink
      // "insertReplacementText"	insert or replace existing content by means of a spell checker, auto-correct, writing suggestions or similar	No	Yes	Any
      // "insertLineBreak"	insert a line break	No	Yes	Any
      // "insertFromYank"	replace the current selection with content stored in a kill buffer	No	Yes	Any
      // "insertFromDrop"	insert content by means of drop	No	Yes	Any
      // "insertFromPaste"	paste content from clipboard or paste image from client provided image library	No	Yes	Any
      // "insertFromPasteAsQuotation"	paste content from the clipboard as a quotation	No	Yes	Any
      // "insertTranspose"	transpose the last two grapheme cluster. that were entered	No	Yes	Any
      // "insertCompositionText"	replace the current composition string	Yes	No	Any
      else if (inputType === "") {
      } else if (inputType === "insertContent") {
        // REPORT
      }
      // DELETE COMMANDS:
      // Aditya Borkar is here to assist you to fill up this form real quick. Be fast or else I will work for someone else and you shall regret it for rest of your life!
      else if (inputType === "deleteContentBackward") {
        const newIndex = index - 1;
        const span = getSpan(newIndex);
        if (!span) return;
        removeChar(span);
        setIndex(newIndex);
      } else if (inputType === "deleteContentForward") {
        const span = getSpan(index);
        if (!span) return;
        removeChar(span);
      } else if (inputType === "deleteWordBackward") {
        const text = input.value;
        const firstIndex = text.substring(0, index).lastIndexOf(" ");
        for (let i = firstIndex; i < index; i++) {
          const span = getSpan(i);
          if (!span) continue;
          removeChar(span);
        }
        setIndex(firstIndex);
      } else if (inputType === "deleteWordForward") {
        const text = input.value;
        const lastIndex = text.substring(index, text.length).indexOf(" ");
        for (let i = index; i < lastIndex; i++) {
          const span = getSpan(i);
          if (!span) continue;
          removeChar(span);
        }
      } else if (inputType === "deleteByCut") {
        const span = getSpan(index - 1);
        if (!span) return;
        setIndex(index - 1);
        removeChar(span);
      } else if (inputType === "deleteContent") {
        // REPORT
        console.log(e);
      }
      // "deleteSoftLineBackward"	delete from the caret to the nearest visual line break before the caret position	No	Yes	Collapsed
      // "deleteSoftLineForward"	delete from the caret to the nearest visual line break after the caret position	No	Yes	Collapsed
      // "deleteEntireSoftLine"	delete from the nearest visual line break before the caret position to the nearest visual line break after the caret position	No	Yes	Collapsed
      // "deleteHardLineBackward"	delete from the caret to the nearest beginning of a block element or br element before the caret position	No	Yes	Collapsed
      // "deleteHardLineForward"	delete from the caret to the nearest end of a block element or br element after the caret position	No	Yes	Collapsed
      // "deleteByDrag"	remove content from the DOM by means of drag	No	Yes	Any
      // HISTORY COMMANDS:
      else if (inputType === "historyUndo") {
        // console.log(e);
      } else if (inputType === "historyRedo") {
        // console.log(e);
      } else {
        // console.log(e);
        // REPORT
      }
    }

    function insertChar(char: string) {
      const span = document.createElement("span");
      span.style.display = "inline-block";
      span.innerHTML = char === " " ? "&nbsp;" : char;
      shadow.appendChild(span);
      setIndex(index + 1);
      animate(
        span,
        {
          opacity: [0, 1],
          width: [0, "auto"],
          transform: ["translateY(5px)", "translateY(0px)"],
        },
        { duration: 0.2 },
      );
      return span;
    }

    function updateCaretPos() {
      const span = getSpan(index - 1);
      if (!span) {
        animate(caret, { left: 0, top: 0 }, { duration: 0.2 });
        return;
      }

      const shadowBounds = shadow.getBoundingClientRect();
      const spanBounds = span.getBoundingClientRect();
      const left = `${spanBounds.x - shadowBounds.x + spanBounds.width}px`;
      const top = `${spanBounds.y - shadowBounds.y}px`;
      animate(caret, { left, top }, { duration: 0.2 });
      console.log({ index });
    }

    function listenKeys(e: KeyboardEvent) {
      setTimeout(() => {
        let newIndex = index;
        const { key, shiftKey, ctrlKey, repeat } = e;
        if (key.startsWith("Arrow")) {
          if (key === "ArrowLeft") {
            // TODO: IF SHIFT, THEN SELECT TEXT.
            newIndex = ctrlKey ? getWordIndex(true) : index - 1;
          } else if (key === "ArrowRight") {
            // TODO: IF SHIFT, THEN SELECT TEXT.
            newIndex = ctrlKey ? getWordIndex(false) : index + 1;
          }
          // else if (key === "ArrowUp") {
          //   // TODO: IF SHIFT, THEN SELECT TEXT.
          //   newIndex = ctrlKey ? getWordIndex(true) : index - 1;
          // } else if (key === "ArrowDown") {
          //   // TODO: IF SHIFT, THEN SELECT TEXT.
          //   newIndex = ctrlKey ? getWordIndex(false) : index + 1;
          // }
        }
        //  else if (key === "Home") {
        //   setIndex(0);
        // } else if (key === "End") {
        //   setIndex(input.value.length);
        // } else if (key === "PageDown") {
        //   setIndex(index + 10);
        // } else if (key === "PageUp") {
        //   setIndex(index - 10);
        // }

        setIndex(newIndex);
      }, 0);
    }

    function startTyping() {
      caret.classList.add("typing");
      if (typingTimer) clearTimeout(typingTimer);
      typingTimer = window.setTimeout(() => {
        caret.classList.remove("typing");
        typingTimer = null;
      }, 1000);
    }
  }
</script>
