---
import type { Thing, WithContext } from "schema-dts";

import { ClientRouter } from "astro:transitions";
import CookiePopup from "@/components/CookiePopup.astro";
import Posthog from "@/components/Posthog.astro";
import { JsonLd } from "@/lib/jsonLd";
import { Font } from "astro:assets";
import { SOCIALS } from "cms/constants";

import "./global.css";

interface OpenGraph {
    url: string;
    general: {
        type: // | "music.song"
        // | "music.album"
        // | "music.playlist"
        // | "music.radio_station"
        // | "video.movie"
        // | "video.episode"
        // | "video.tv_show"
        // | "video.other"
        "article" | "book" | "profile" | "website";
        title: string; // max. 70 chars
        description: string; // max. 200 chars
    };
    twitter: {
        type: "summary" | "summary_large_image" | "app" | "player";
        title: string; // max. 70 chars
        description: string; // max. 200 chars
    };
    // image: string;
}

interface Props {
    title: string;
    description: string;
    keywords: string[];
    open_graph: OpenGraph;
    schema_markup?: Promise<WithContext<Thing>>[] | WithContext<Thing>[];
}

const {
    title,
    description,
    keywords,
    open_graph,
    schema_markup = [],
} = Astro.props;

export const partial = true;
---

<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta http-equiv="Accept-CH" content="Width, Downlink, Sec-CH-UA" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="sitemap" href="/sitemap-index.xml" />
        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="keywords" content={keywords?.join(", ")} />
        <script
            type="application/ld+json"
            set:html={(await Promise.all(schema_markup)).map(JsonLd).join("\n")}
            is:inline
        />
        <!-- <meta property="og:locale" content="en_US" />
        <meta property="og:site_name" content="Aditya Borkar" />
        <meta property="og:type" content={open_graph.general.type} />
        <meta property="og:url" content={open_graph.url} />
        <meta property="og:title" content={open_graph.general.title} />
        <meta
            property="og:description"
            content={open_graph.general.description}
        /> -->
        <!-- <meta property="og:image" content="<generated>" />
        <meta property="og:image:alt" content="<generated>" />
        <meta property="og:image:type" content="<generated>" />
        <meta property="og:image:width" content="<generated>" />
        <meta property="og:image:height" content="<generated>" /> -->
        <!-- <meta property="twitter:domain" content="meta.com" /> -->
        <!-- <meta name="twitter:card" content={open_graph.twitter.type} />
        <meta property="twitter:creator" content={SOCIALS.x} />
        <meta property="twitter:site" content={SOCIALS.x} />
        <meta property="twitter:url" content={open_graph.url} />
        <meta name="twitter:title" content={open_graph.twitter.title} />
        <meta
            name="twitter:description"
            content={open_graph.twitter.description}
        /> -->
        <!-- <meta name="twitter:image" content="<generated>" />
        <meta name="twitter:image:alt" content="<generated>" />
        <meta name="twitter:image:type" content="<generated>" />
        <meta name="twitter:image:width" content="<generated>" />
        <meta name="twitter:image:height" content="<generated>" /> -->
        <Font cssVariable="--font-inter" preload />
        <Font cssVariable="--font-lora" preload />
        <ClientRouter />
        <script data-astro-rerun type="module" is:inline>
            const doc = document.documentElement;
            window
                .matchMedia("(prefers-color-scheme: dark)")
                .addEventListener("change", (event) => {
                    const isDark = event.matches;
                    doc.classList.toggle("dark", isDark);
                    window.localStorage.setItem(
                        "theme",
                        isDark ? "dark" : "light",
                    );
                });

            const theme =
                window.localStorage.getItem("theme") ||
                (window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light");
            console.log({ theme });
            doc.classList.toggle("dark", theme === "dark");

            document.body.style.visibility = "visible";
            document.body.style.opacity = "1";
        </script>
    </head>
    <body
        class="text-sm font-normal leading-normal antialiased relative min-h-screen cursor-default bg-background text-text-secondary font-sans-serif invisible opacity-0"
        style="text-rendering: optimizeLegibility; -webkit-text-size-adjust: 100%; scroll-behavior: smooth;"
    >
        <script>
            declare global {
                interface Window {
                    isMobile: boolean;
                }
            }

            function determineMobile() {
                window.isMobile = window.innerWidth < 768;
            }

            // Observe:
            window.addEventListener("resize", determineMobile);

            // Initialize:
            determineMobile();
        </script>

        <slot />

        <CookiePopup />

        <script>
            import Lenis from "lenis";
            new Lenis({ autoRaf: true, lerp: 0.06 });
        </script>

        {process.env.NODE_ENV !== "development" && <Posthog />}
    </body>
</html>
