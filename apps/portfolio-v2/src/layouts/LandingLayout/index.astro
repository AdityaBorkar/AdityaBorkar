---
import type { Thing, WithContext } from "schema-dts";

import Footer from "./Footer.astro";
import Header from "./Header.astro";
import { JsonLd } from "@/lib/jsonLd";
import { cn } from "@/lib/utils";
import Analytics from "../Analytics";
import "../global.css";

interface Props {
  title: string;
  description: string;
  keywords: string[];
  schemaMarkup?: WithContext<Thing>;
}

const { title, description, keywords, schemaMarkup } = Astro.props;

// TODO: Theme selection on Preflight Basis and persist local storage
const theme = ""; // 'dark'

// TODO: Add Squircle CSS Worklet
// import 'css-paint-polyfill'
// import workletURL from "url-loader!<package-name>/worklet.js";
// const workletURL = ''
// CSS.paintWorklet.addModule(workletURL)

Analytics();
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <!-- themeColor	false	"#000000"	Browser theme color.
    colorScheme	false	"light"	Preferred color scheme. -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords?.join(", ")} />
    <!-- Open Graph -->
    <!-- facebook.image	false	"/facebook.png"	Facebook share image.
    facebook.url	false	"https://astro.build"	Page URL.
    facebook.type	false	"website"	Type of resource. See all types here.
    twitter.image	false	"/twitter.png"	Twitter share image.
    twitter.site	false	"@astrodotbuild"	Twitter handle of publishing site.
    twitter.card	false	"summary"	Format of Twitter share card. See all types here. -->
    <!-- Schema Markup -->
    <script
      type="application/ld+json"
      set:html={schemaMarkup ? JsonLd(schemaMarkup) : ""}
    />
  </head>
  <body
    class={cn(
      theme,
      "relative min-h-screen cursor-default bg-bg-primary text-text-secondary",
      "text-sm leading-normal antialiased",
      // 'before:absolute before:left-0 before:top-0 before:-z-10 before:h-full before:w-full',
      // 'before:[background-image:radial-gradient(#cbd5e1,_transparent_3px)] before:[background-size:25px_25px]',
    )}
  >
    <!-- <div className="fixed left-0 top-0 h-full w-[calc((100vw-72rem)/3)] bg-gradient-to-r from-white dark:from-black" /> -->
    <!-- <div className="fixed right-0 top-0 h-full w-[calc((100vw-72rem)/3)] bg-gradient-to-l from-white dark:from-black" /> -->
    <!-- <ReactLenis root> -->
    <Header />
    <slot />
    <Footer />
    <!-- </ReactLenis> -->
  </body>
</html>
