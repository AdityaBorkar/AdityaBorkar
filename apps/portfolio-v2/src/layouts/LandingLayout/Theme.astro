---
import MoonIcon from "@/assets/icons/Moon.svg";
import SunIcon from "@/assets/icons/Sun.svg";

interface Props {
    class?: string;
}

const props = Astro.props;
---

<style is:global>
    .theme-transitioning::view-transition-new(root) {
        mask: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><circle cx="20" cy="20" r="20" fill="white"/></svg>');
        mask-repeat: no-repeat;
        mask-size: 0;
        mask-position: calc((min(70vw, 54rem) + 56px + 100vw) / 2)
            calc(64px + 6px + ((16px + 8px) / 2));
    }

    .theme-transitioning::view-transition-old(root),
    .dark.theme-transitioning::view-transition-old(root) {
        animation: none;
        z-index: -1;
    }

    .theme-transitioning::view-transition-new(root),
    .dark.theme-transitioning::view-transition-new(root) {
        animation: animate-switch-theme 2s;
        animation-timing-function: cubic-bezier(0, 0, 0.58, 1);
    }

    @keyframes animate-switch-theme {
        to {
            mask-size: 300vmax;
            mask-position: -75vmax -150vmax;
        }
    }
</style>

<button
    type="button"
    toggle-theme
    class:list={[
        props.class,
        "p-2 text-text-secondary border-border/20 duration-0 rounded-full",
        "hover:bg-bg-secondary focus-visible:bg-bg-secondary focus-visible:ring-2 focus-visible:ring-text-secondary",
        "md:bg-bg-primary md:border",
    ]}
>
<!-- TODO: Introduce one more option - SYSTEM DEFAULT -->
    <MoonIcon class="hidden dark:block size-4" />
    <SunIcon class="dark:hidden size-4" />
</button>

<script>
    document.addEventListener("astro:page-load", () => {
        // Switch CalMeetButton Theme
        const isDark = isDarkMode();
        switchCalMeetButtonTheme(isDark);
        function switchCalMeetButtonTheme(isDark: boolean) {
            const calMeetButton =
                document.querySelectorAll("[data-cal-config]");
            calMeetButton.forEach((button) => {
                const configText = button.getAttribute("data-cal-config");
                if (!configText) return;
                const config = JSON.parse(configText);
                config.theme = isDark ? "dark" : "light";
                button.setAttribute("data-cal-config", JSON.stringify(config));
            });
        }

        function isDarkMode() {
            return document.documentElement.classList.contains("dark");
        }

        document.querySelectorAll("[toggle-theme]").forEach((element) => {
            element.addEventListener("click", (e) => {
                e.stopPropagation();
                e.preventDefault();

                const isLight = !isDarkMode();
                window.localStorage.setItem(
                    "theme",
                    isLight ? "dark" : "light",
                );

                const switchTheme = () => {
                    document.documentElement.classList.toggle("dark", isLight);
                    switchCalMeetButtonTheme(isLight);
                };
                const endThemeSwitch = () => {
                    document.documentElement.classList.remove(
                        "theme-transitioning",
                    );
                };

                document.documentElement.classList.add("theme-transitioning");
                if (!document.startViewTransition) {
                    switchTheme();
                    endThemeSwitch();
                } else {
                    document
                        .startViewTransition(switchTheme)
                        .finished.finally(endThemeSwitch);
                }
            });
        });
    });
</script>
