---
import MoonIcon from "@/assets/icons/Moon.svg";
import SunIcon from "@/assets/icons/Sun.svg";

interface Props {
    class?: string;
}

const props = Astro.props;
---

<style>
    /* :root {
        --expo-out: linear(
            0 0%,
            0.1684 2.66%,
            0.3165 5.49%,
            0.446 8.52%,
            0.5581 11.78%,
            0.6535 15.29%,
            0.7341 19.11%,
            0.8011 23.3%,
            0.8557 27.93%,
            0.8962 32.68%,
            0.9283 38.01%,
            0.9529 44.08%,
            0.9711 51.14%,
            0.9833 59.06%,
            0.9915 68.74%,
            1 100%
        );
    }

    ::view-transition-group(root) {
        animation-timing-function: var(--expo-out);
    }

    ::view-transition-new(root) {
        mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><defs><filter id="blur"><feGaussianBlur stdDeviation="2"/></filter></defs><circle cx="20" cy="0" r="18" fill="white" filter="url(%23blur)"/></svg>');
        mask-repeat: no-repeat;
        mask-size: 0;
        mask-position: 80% 0%;
        animation: animate-switch-theme 1s;
    }

    ::view-transition-old(root),
    .dark::view-transition-old(root) {
        animation: none;
        z-index: -1;
    }
    .dark::view-transition-new(root) {
        animation: animate-switch-theme 1s;
    }

    @keyframes animate-switch-theme {
        to {
            mask-size: 350vmax;
            mask-position: 80% 0%;
        }
    } */
</style>

<button
    type="button"
    data-theme="toggle"
    class:list={[
        props.class,
        "p-2 text-text-secondary border border-border/20 bg-bg-primary transition-colors duration-300 rounded-full",
        "hover:bg-bg-secondary focus-visible:bg-bg-secondary focus-visible:ring-2 focus-visible:ring-text-secondary",
    ]}
>
    <MoonIcon class="hidden dark:block size-4" />
    <SunIcon class="dark:hidden size-4" />
</button>

<script>
    // Switch CalMeetButton Theme
    function switchCalMeetButtonTheme(isDark: boolean) {
        const calMeetButton = document.querySelectorAll("[data-cal-config]");
        calMeetButton.forEach((button) => {
            const configText = button.getAttribute("data-cal-config");
            if (!configText) return;
            const config = JSON.parse(configText);
            config.theme = isDark ? "dark" : "light";
            button.setAttribute("data-cal-config", JSON.stringify(config));
        });
    }

    switchCalMeetButtonTheme(isDarkMode());

    function isDarkMode() {
        return document.documentElement.classList.contains("dark");
    }

    document.querySelectorAll("[data-theme='toggle']").forEach((element) => {
        element.addEventListener("click", () => {
            const isDark = !isDarkMode();
            window.localStorage.setItem("theme", isDark ? "dark" : "light");

            const switchTheme = () => {
                document.documentElement.classList.toggle("dark", isDark);
                switchCalMeetButtonTheme(isDark);
            };
            if (!document.startViewTransition) switchTheme();
            document.startViewTransition(switchTheme);
        });
    });
</script>
