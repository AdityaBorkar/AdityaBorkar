---
interface Props {
  class?: string;
}

const { class: className } = Astro.props;

const text = "Book a Meeting";
---

<button
  type="submit"
  class:list={[className, "overflow-clip"]}
  data-animate="text-roll"
  data-cal-namespace="tech"
  data-cal-link="aditya-borkar/tech"
  data-cal-config='{"layout":"month_view"}'
>
  <!-- SHIMMER TEXT -->
  <!-- CHANGE SHADOW -->
  <!-- <slot /> -->
  {
    text.split("").map((letter, i) => {
      return (
        <span
          class="relative inline-block [perspective:10000px] [transform-style:preserve-3d] [width:auto]"
          aria-hidden="true"
        >
          {/* {letter} */}
          <span class="absolute inline-block [backface-visibility:hidden] [transform-origin:50%_25%]">
            {/* //         initial={
      //           variants?.enter?.initial ?? defaultVariants.enter.initial
      //         }
      //         animate={
      //           variants?.enter?.animate ?? defaultVariants.enter.animate
      //         }
      //         transition={{
      //           ...transition,
      //           duration,
      //           delay: getEnterDelay(i),
      //         }} */}

            {/* // variants={{
      //   enter: {
      //     initial: { y: 0 },
      //     animate: { y: 40 },
      //   },
      //   exit: {
      //     initial: { y: -40 },
      //     animate: { y: 0 },
      //   },
      // }} */}
            {letter === " " ? "\u00A0" : letter}
          </span>
          <motionspan
            className="absolute inline-block [backface-visibility:hidden] [transform-origin:50%_100%]"
            initial={variants?.exit?.initial ?? defaultVariants.exit.initial}
            animate={variants?.exit?.animate ?? defaultVariants.exit.animate}
            transition={{
              ...transition,
              duration,
              delay: getExitDelay(i),
            }}
            onAnimationComplete={
              letters.length === i + 1 ? onAnimationComplete : undefined
            }
          >
            {letter === " " ? "\u00A0" : letter}
          </motionspan>
          <span class="invisible">{letter === " " ? "\u00A0" : letter}</span>
        </span>
      );
    })
  }
</button>

<script>
  import { animate } from "motion";

  const button = document.querySelector("[data-animate='text-roll']");
  button?.addEventListener("mouseover", () => {
    if (button) {
      const text = button.textContent;
      const chars = text?.split("");
      console.log(chars);

      animate(0, chars?.length, {
        duration: 5,
        ease: "circOut",
        onUpdate: (latest) => (button.innerHTML = text?.slice(0, latest)),
      });
      // duration={0.3}
      // getEnterDelay={(i) => i * 0.05}
      // getExitDelay={(i) => i * 0.05 + 0.05}
      // transition={{
      //   ease: [0.175, 0.885, 0.32, 1.1],
      // }}
    }
  });
</script>

<!-- Contact Form: Collect only necessary data (e.g., name, email) with explicit user consent and explain its use. -->
<script is:inline>
  (function (C, A, L) {
    let p = function (a, ar) {
      a.q.push(ar);
    };
    let d = C.document;
    C.Cal =
      C.Cal ||
      function () {
        let cal = C.Cal;
        let ar = arguments;
        if (!cal.loaded) {
          cal.ns = {};
          cal.q = cal.q || [];
          d.head.appendChild(d.createElement("script")).src = A;
          cal.loaded = true;
        }
        if (ar[0] === L) {
          const api = function () {
            p(api, arguments);
          };
          const namespace = ar[1];
          api.q = api.q || [];
          if (typeof namespace === "string") {
            cal.ns[namespace] = cal.ns[namespace] || api;
            p(cal.ns[namespace], ar);
            p(cal, ["initNamespace", namespace]);
          } else p(cal, ar);
          return;
        }
        p(cal, ar);
      };
  })(window, "https://app.cal.com/embed/embed.js", "init");
  Cal("init", "tech", { origin: "https://cal.com" });

  Cal.ns.tech("ui", {
    hideEventTypeDetails: false,
    layout: "month_view",
  });
</script>
